# (C) Copyright 2021 Hewlett Packard Enterprise Development LP
#
# https://github.com/golangci/golangci-lint/blob/master/.golangci.example.yml
run:
  deadline: 4m
  tests: false
  skip-dirs:
    - ".*/[Mm]ock"
    - pkg/test
  skip-files:
    - ".*[Mm]ock.*\\.go$"

linters-settings:
  govet:
    # At some point we should enable check-shadow too. We have seen issues due
    #    # to variables being shadowed.
    check-shadowing: true
    settings:
      composites:
        whitelist: false
  goimports:
    local-prefixes: github.com/hpe-hcss

linters:
  disable-all: true
  enable:
    - goconst
    - gofmt
    - golint
    - gosec
    - gosimple
    - govet
    - ineffassign
    - misspell
    - unconvert
# Disabling unused and unparam as there are too many in the code.
# They are also known to report false-positives.
#   - unused
#   - unparam

issues:
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked

    # golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)

    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop

    # gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited

    # gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)

    # gosec: Duplicated errcheck checks
    - G104

    # gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

    # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable

  exclude-rules:
    - linters:
       - gosimple
      text: "S1034:"

  exclude-use-default: false
  max-per-linter: 0
  max-same-issues: 0
  new: false